#!/usr/bin/env ruby

require 'yaml'
require 'json'
require 'open-uri'
require 'fileutils'
require 'tmpdir'
require 'pathname'
require 'net/http'
require 'uri'

class VSCodeExtensionFetcher
  VSIX_URL_TEMPLATE = "https://%s.gallery.vsassets.io/_apis/public/gallery/publisher/%s/extension/%s/latest/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage"
  MARKETPLACE_API_URL = "https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery"

  def initialize(yaml_file)
    STDERR.puts "Initializing VSCodeExtensionFetcher with YAML file: #{yaml_file}"
    @extensions = YAML.load_file(yaml_file)
    @temp_dir = "/tmp/vscode_exts_#{Time.now.to_i}"
    STDERR.puts "Creating temporary directory: #{@temp_dir}"
    FileUtils.mkdir_p(@temp_dir)
  end

  def generate_nix_expression(nix_file)
    STDERR.puts "Starting Nix expression generation"
    File.write(nix_file, header + extension_list + footer)
    puts header
    puts extension_list
    puts footer
  ensure
    cleanup
  end

  private

  def header
    STDERR.puts "Generating header"
    <<~HEADER
      # This file is generated automatically
      { pkgs, ... }:

      {
        programs.vscode.profiles.default.extensions = with pkgs.vscode-extensions;
          [ ] ++ pkgs.vscode-utils.extensionsFromVscodeMarketplace [
    HEADER
  end

  def footer
    STDERR.puts "Generating footer"
    "  ];\n}"
  end

  def extension_list
    queue = Queue.new

    @extensions.each do |ext|
      queue << ext
    end

    results = []

    # Spawn 8 threads to process extensions from the queue
    threads = 8.times.map do
      Thread.new do
        loop do
          ext = queue.pop(true)
          break if ext.nil?
          result = fetch_extension_data(ext)
          results << result
        rescue ThreadError => e
          break
        end
      end
    end.each(&:join)

    # Collect and compact the results to remove any nil values (if needed)
    results.compact.join("\n")
  end

  def fetch_extension_data(extension)
    publisher = extension['publisher']
    name = extension['name']
    STDERR.puts "Processing extension: #{publisher}.#{name}"

    # First, check if the latest version is a prerelease
    version_info = get_version_info(publisher, name)
    if version_info['isPreRelease']
      STDERR.puts "Skipping prerelease extension: #{publisher}.#{name}"
      return nil
    end

    download_path = File.join(@temp_dir, "#{publisher}.#{name}.zip")
    STDERR.puts "Downloading to: #{download_path}"
    download_extension(publisher, name, download_path)

    version = version_info['version']
    STDERR.puts "Found version: #{version}"

    STDERR.puts "Calculating SHA256"
    sha256 = calculate_sha256(download_path)
    STDERR.puts "SHA256: #{sha256}"

    format_extension_data(name, publisher, version, sha256)
  rescue StandardError => e
    STDERR.puts "Error processing extension #{publisher}.#{name}: #{e.message}"
    STDERR.puts e.backtrace.join("\n")
    nil
  end

  def get_version_info(publisher, name)
    uri = URI(MARKETPLACE_API_URL)
    request_body = {
      flags: 870,
      filters: [{
        criteria: [
          { filterType: 7, value: "#{publisher}.#{name}" }
        ],
        pageSize: 1,
        pageNumber: 1
      }]
    }

    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    request = Net::HTTP::Post.new(uri)
    request['Content-Type'] = 'application/json'
    request['Accept'] = 'application/json;api-version=3.0-preview.1'
    request.body = request_body.to_json

    response = http.request(request)
    raise "Failed to get version info: #{response.code}" unless response.is_a?(Net::HTTPSuccess)

    data = JSON.parse(response.body)
    extension = data['results']&.first&.dig('extensions')&.first
    raise "Extension not found" unless extension

    {
      'version' => extension['versions']&.first&.dig('version'),
      'isPreRelease' => extension['versions']&.first&.dig('flags')&.include?('Preview')
    }
  end

  def download_extension(publisher, name, path)
    url = VSIX_URL_TEMPLATE % [publisher, publisher, name]
    STDERR.puts "Downloading from URL: #{url}"
    URI.open(url) do |remote|
      File.open(path, 'wb') do |local|
        local.write(remote.read)
      end
    end
    STDERR.puts "Download completed"
  end

  def calculate_sha256(file_path)
    STDERR.puts "Running nix-hash"
    real_path = Pathname.new(file_path).realpath.to_s
    `nix-hash --flat --base32 --type sha256 #{real_path}`.strip
  end

  def format_extension_data(name, publisher, version, sha256)
    STDERR.puts "Formatting extension data for #{publisher}.#{name}"
    <<~EXTENSION
      {
        name = "#{name}";
        publisher = "#{publisher}";
        version = "#{version}";
        sha256 = "#{sha256}";
      }
    EXTENSION
  end

  def cleanup
    if @temp_dir && File.directory?(@temp_dir)
      STDERR.puts "Cleaning up temporary directory: #{@temp_dir}"
      FileUtils.remove_entry(@temp_dir)
    end
  rescue StandardError => e
    STDERR.puts "Warning: Failed to clean up temporary directory: #{e.message}"
    STDERR.puts e.backtrace.join("\n")
  end
end

# Usage
begin
  STDERR.puts "Starting VSCode Extension Fetcher"
  yaml_file = ARGV[0] || 'vscode-extensions.yml'
  output = "vscode-extensions.nix"
  STDERR.puts "Using YAML file: #{yaml_file}"
  fetcher = VSCodeExtensionFetcher.new(yaml_file)
  fetcher.generate_nix_expression(output)
  system("nixfmt #{output}")
rescue StandardError => e
  STDERR.puts "Fatal error: #{e.message}"
  STDERR.puts e.backtrace.join("\n")
  exit 1
end

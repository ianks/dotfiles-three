#!/usr/bin/env ruby

require 'yaml'
require 'json'
require 'open-uri'
require 'fileutils'
require 'tmpdir'
require 'pathname'

class VSCodeExtensionFetcher
  VSIX_URL_TEMPLATE = "https://%s.gallery.vsassets.io/_apis/public/gallery/publisher/%s/extension/%s/latest/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage"

  def initialize(yaml_file)
    STDERR.puts "Initializing VSCodeExtensionFetcher with YAML file: #{yaml_file}"
    @extensions = YAML.load_file(yaml_file)
    @temp_dir = "/tmp/vscode_exts_#{Time.now.to_i}"
    STDERR.puts "Creating temporary directory: #{@temp_dir}"
    FileUtils.mkdir_p(@temp_dir)
  end

  def generate_nix_expression(nix_file)
    STDERR.puts "Starting Nix expression generation"
    File.write(nix_file, header + extension_list + footer)
    puts header
    puts extension_list
    puts footer
  ensure
    cleanup
  end

  private

  def header
    STDERR.puts "Generating header"
    <<~HEADER
      # This file is generated automatically
      { pkgs, ... }:

      {
        programs.vscode.extensions = with pkgs.vscode-extensions;
          [ ] ++ pkgs.vscode-utils.extensionsFromVscodeMarketplace [
    HEADER
  end

  def footer
    STDERR.puts "Generating footer"
    "  ];\n}"
  end

  def extension_list
    queue = Queue.new

    @extensions.each do |ext|
      queue << ext
    end

    results = []

    # Spawn 8 threads to process extensions from the queue
    threads = 8.times.map do
      Thread.new do
        loop do
          ext = queue.pop(true)
          break if ext.nil?
          result = fetch_extension_data(ext)
          results << result
        rescue ThreadError => e
          break
        end
      end
    end.each(&:join)

    # Collect and compact the results to remove any nil values (if needed)
    results.compact.join("\n")
  end

  def fetch_extension_data(extension)
    publisher = extension['publisher']
    name = extension['name']
    STDERR.puts "Processing extension: #{publisher}.#{name}"

    download_path = File.join(@temp_dir, "#{publisher}.#{name}.zip")
    STDERR.puts "Downloading to: #{download_path}"
    download_extension(publisher, name, download_path)

    STDERR.puts "Extracting version information"
    version = extract_version(download_path)
    STDERR.puts "Found version: #{version}"

    STDERR.puts "Calculating SHA256"
    sha256 = calculate_sha256(download_path)
    STDERR.puts "SHA256: #{sha256}"

    format_extension_data(name, publisher, version, sha256)
  rescue StandardError => e
    STDERR.puts "Error processing extension #{publisher}.#{name}: #{e.message}"
    STDERR.puts e.backtrace.join("\n")
    nil
  end

  def download_extension(publisher, name, path)
    url = VSIX_URL_TEMPLATE % [publisher, publisher, name]
    STDERR.puts "Downloading from URL: #{url}"
    URI.open(url) do |remote|
      File.open(path, 'wb') do |local|
        local.write(remote.read)
      end
    end
    STDERR.puts "Download completed"
  end

  def extract_version(zip_path)
    STDERR.puts "Extracting package.json from zip"
    package_json = `unzip -qc #{zip_path} "extension/package.json"`
    JSON.parse(package_json)['version']
  end

  def calculate_sha256(file_path)
    STDERR.puts "Running nix-hash"
     real_path = Pathname.new(file_path).realpath.to_s
    `nix-hash --flat --base32 --type sha256 #{real_path}`.strip
  end

  def format_extension_data(name, publisher, version, sha256)
    STDERR.puts "Formatting extension data for #{publisher}.#{name}"
    <<~EXTENSION
      {
        name = "#{name}";
        publisher = "#{publisher}";
        version = "#{version}";
        sha256 = "#{sha256}";
      }
    EXTENSION
  end

  def cleanup
    if @temp_dir && File.directory?(@temp_dir)
      STDERR.puts "Cleaning up temporary directory: #{@temp_dir}"
      FileUtils.remove_entry(@temp_dir)
    end
  rescue StandardError => e
    STDERR.puts "Warning: Failed to clean up temporary directory: #{e.message}"
    STDERR.puts e.backtrace.join("\n")
  end
end

# Usage
begin
  STDERR.puts "Starting VSCode Extension Fetcher"
  yaml_file = ARGV[0] || 'vscode-extensions.yml'
  output = "vscode-extensions.nix"
  STDERR.puts "Using YAML file: #{yaml_file}"
  fetcher = VSCodeExtensionFetcher.new(yaml_file)
  fetcher.generate_nix_expression(output)
  system("nixfmt #{output}")
rescue StandardError => e
  STDERR.puts "Fatal error: #{e.message}"
  STDERR.puts e.backtrace.join("\n")
  exit 1
end
